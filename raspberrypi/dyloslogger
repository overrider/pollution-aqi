#!/usr/bin/perl

# This program reads data from a Dylos DC1100 Pro AIQ sensor 
# and attempts to send recorded data to an HTTP endpoint at regular intervals

use strict;
use warnings;

use Device::SerialPort;
use LWP::UserAgent;
use Time::Piece;
use JSON;

my $device			= "/dev/ttyUSB0";
my $server_endpoint = "http://pollution.ironwhale.com";
my $logfile			= "/dylos.txt";

my $source 		= 'dc110pro-home';
if(!-e "/etc/AQI_API_KEY"){
	die("Could not read /etc/AQI_API_KEY");
}
my $api_key 	= `cat /etc/AQI_API_KEY`;
chomp($api_key);

my $debug = 0;
if(-e "/DEBUG"){
	$debug		= 1;
}

my $store_to_file = 1;
my $store_to_http = 0;

if($debug){
	print "Debug mode on\n";
}

my $port = Device::SerialPort->new($device) or die("Could not open Serialport!\n");
$port->baudrate(9600);
$port->databits(8);
$port->parity("none");
$port->stopbits(1);
$port->are_match("\n","\r");
$port->write_settings();

my $batch_001 = time();
my $batch_005 = time();
my $batch_015 = time();
my $batch_030 = time();
my $batch_060 = time();
my $batch_120 = time();
my $batch_300 = time();

my $old_small = -1;
my $old_large = -1;

while(1){
	my $input = $port->lookfor();
	my $current_time = time();
	my $remark = "";

	if($current_time - $batch_001 > 60){
		$batch_001 = time();
	} elsif($current_time - $batch_005 > 300){
		$batch_005 = time();
	} elsif($current_time - $batch_015 > 900){
		$batch_015 = time();
	} elsif($current_time - $batch_030 > 1800){
		$batch_030 = time();
	} elsif($current_time - $batch_060 > 3600){
		if(&send_logfile_to_http() == 1){
			&truncate_logfile();
		}
		$batch_060 = time();
	} elsif($current_time - $batch_120 > 7200){
		$batch_120 = time();
	} elsif($current_time - $batch_300 > 18000){
		$batch_300 = time();
	}

	my $timestamp = $current_time;

	if($input){
		chomp($input);
		my ($small, $large) = split(/,/,$input);

		if(!$small =~ /^[0-9]+$/){
			print "Out of Bounds\n";
			$remark = "Bad reading";
			$small = 0;
		}

		if(!$large =~ /^[0-9]+$/){
			print "Out of Bounds\n";
			$remark = "Bad reading";
			$large = 0;
		}

		if($old_small == -1){
			$old_small = $small;
		}

		if($old_large == -1){
			$old_large = $large;
		}

		my $percent_large = (($large - $old_large) / $old_large) * 100;
		$percent_large = abs($percent_large);
		$percent_large = sprintf("%.2f",$percent_large);

		my $percent_small = (($small - $old_small) / $old_small) * 100;
		$percent_small = abs($percent_small);
		$percent_small = sprintf("%.2f",$percent_small);

		if($percent_small > 100 || $percent_large > 100){
			$remark = "Suspicious reading";
		}

		if($debug){
			print "$timestamp,$source,$api_key,$small,$large,$remark\n";
		}

		if($store_to_file){
			open(my $fh, '>>', $logfile) or die "Could not open file '$logfile' $!\n";
			print $fh "$timestamp,$source,$api_key,$small,$large,$remark\n";
			close($fh);
		}

		if($store_to_http){
			my $ua       = LWP::UserAgent->new();
			my $response = $ua->post( $server_endpoint.'/upload-dylos', { 
				'timestamp'	=> $timestamp,
				'source'      => $source,
				'api_key'     => $api_key,
				'small'        => $small,
				'large'        => $large,
				'remark'	=> $remark
			});
			my $content  = $response->decoded_content();

			if ($response->is_success) {
				my $message = $response->decoded_content;
				if($debug){
					print "Received reply: $message\n";
				}
			} else {
				if($debug){
					print "HTTP POST error code: ", $response->code, "\n";
					print "HTTP POST error message: ", $response->message, "\n";
				}
			}
		}
	}
	$port->lookclear; 
	sleep(1);
}

sub send_logfile_to_http(){
	local $/;

	if($debug){
		print "Reading data...\n";
	}
	open(FILEHANDLE, '<', $logfile) or die "Could not open file '$logfile' $!\n";
	my $csv_data = <FILEHANDLE>;
	close(FILEHANDLE);

	if($debug){
		print "Posting data...\n";
	}
	my $ua       = LWP::UserAgent->new();
	my $response = $ua->post( $server_endpoint . "/upload-dylos-batch", { 
		'api_key'	=> $api_key,
		'csv_data'  => $csv_data
	});

	if ($response->is_success) {
		my $message = $response->decoded_content;
		my $message_j = decode_json($message);

		if($message_j->{'status'} eq "OK"){
			return 1;
		} else {
			return 0;
		}
	} else {
		if($debug){
			print "HTTP POST error code: ", $response->code, "\n";
			print "HTTP POST error message: ", $response->message, "\n";
		}
		return 0;
	}
	return 0;
}

sub send_logfile_to_database(){
}

sub truncate_logfile(){
	open(FILEHANDLE, '>', $logfile) or die "Could not truncate file '$logfile' $!\n";
	close(FILEHANDLE);
	return 0;
}
